Create - delay balancing

Existing logic

1. Validate
2. Record account IDs from transaction items for balancing later
3. Save transaction
  a. before-save
    i. remote items
    ii. prepare lot-action for database storage (convert to string)
  b. create-transaction-and-lot-links
    i. Create the transaction record
    ii. Create linking records between the transaction and any associated lots
  c. after-read
    i. append items from the database
    ii. append lot items from the database (will be empty on create, yes?)
  d. Iterate transaction items, set :balance and :index to 0, create the database record,
     replace the items in the result with the result of the "create" calls

Create - with balance calculations

1. Validate
2. calculate-balances-and-indexes
  a. group by account then for each item group
    ii. add-item-balance-and-index
      1. sort by index
      2. get the previous item, balance, and index
      3. for each item, process-item-balance-and-index
        a. calculate the next index
        b. calculate next balance (look up the account from storage, polarize the amount)
        c. update the item hash
        d. (update the processing context)
3. update-affected-balances
  a. group items by account, then for each item group
    i. get the last item (already sorted)
    ii. look up the account from storage
    iii. look up the subsequent items for the account from storage
    iv. for each subsequent item
      1. calculate-item-index-and-balance
        a. calculate the next index
        b. calculate the next balance (look up the account from storage, polarize the amount)
        c. calculate the new balance
        d. update the item in storage (short cut further calculations if the balance did not change)
  b. update the account balance (if not short-cutted)
4. create transaction items for the transaction and replace the ones in the transaction
   has with the result

Goal Logic

1. Validate
2. create transaction record
3. create transaction item records
4. get preceding transaction items
5. calculate balances and index in all affected accounts based on preceding items (shortcut once balance is unchanged)
6. update all affected accounts
7. reload and return the transaction

Update

Current Logic

1. Validate
2. process-removals
  a. select items from the existing transaction that don't exist in the updated transaction
  b. select accountss no longer referenced by the transaction
  c. delete transaction items no longer in the transaction
  d. get the previous item for each removed item (and return this list)
3. calculate-balances-and-indexes
  a. group by account then for each item group
    ii. add-item-balance-and-index
      1. sort by index
      2. get the previous item, balance, and index
      3. for each item, process-item-balance-and-index
        a. calculate the next index
        b. calculate next balance (look up the account from storage, polarize the amount)
        c. update the item hash
        d. (update the processing context)
4. process-item-upserts
5. update-transaction
6. uplodate-affected-balances
  a. group items by account, then for each item group
    i. get the last item (already sorted)
    ii. look up the account from storage
    iii. look up the subsequent items for the account from storage
    iv. for each subsequent item
      1. calculate-item-index-and-balance
        a. calculate the next index
        b. calculate the next balance (look up the account from storage, polarize the amount)
        c. calculate the new balance
        d. update the item in storage (short cut further calculations if the balance did not change)
  b. update the account balance (if not short-cutted)

Goal logic

How to handle updates that cross partition boundries?

1. Validate
2. Save the transaction record
3. Delete dereferenced items
4. Collect base items for accounts for dereferenced items
5. Upsert transaction items
6. Collect base items for accounts for items
7. Process all base items (calculate index and balance)
8. Update all affected accounts
9. Reload and return the transaction
